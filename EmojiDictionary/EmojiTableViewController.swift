//
//  EmojiTableViewController.swift
//  EmojiDictionary
//
//  Created by Denis Bystruev on 08/10/2018.
//  Copyright ¬© 2018 Denis Bystruev. All rights reserved.
//

import UIKit

class EmojiTableViewController: UITableViewController {
    
    
    var emojis: [Emoji] = [
        Emoji(symbol: "üê¢", name: "–ß–µ—Ä–µ–ø–∞—Ö–∞", description: "–ó–µ–ª—ë–Ω–∞—è —á–µ—Ä–µ–ø–∞—Ö–∞", usage: "–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ", group: "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
        Emoji(symbol: "üê∞", name: "–ó–∞—è—Ü", description: "–ó–∞—è—Ü —Å —É—à–∞–º–∏", usage: "–±—ã—Å—Ç—Ä–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ", group: "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
        Emoji(symbol: "üê±", name: "–ö–æ—à–∫–∞", description: "–ñ—ë–ª—Ç—ã–π –∫–æ—Ç", usage: "—Ö–∏—Ç—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", group: "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
        Emoji(symbol: "üê∂", name: "–°–æ–±–∞–∫–∞", description: "–¢–∏–ø–∏—á–Ω—ã–π –ø—ë—Å", usage: "–æ—Ç–∫—Ä—ã—Ç–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", group: "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
        Emoji(symbol: "üòÄ", name: "–°–º–∞–π–ª–∏–∫", description: "–£–ª—ã–±–∞—é—â–∞—è—Å—è –º–æ—Ä–¥–æ—á–∫–∞", usage: "–ø–æ–ª–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ", group: "–°–º–∞–π–ª–∏–∫–∏"),
        Emoji(symbol: "üòá", name: "–ê–Ω–≥–µ–ª", description: "–ú–æ—Ä–¥–æ—á–∫–∞ —Å –Ω–∏–º–±–æ–º", usage: "—Ö–æ—Ä–æ—à–∏–µ –ø–æ—Å—Ç—É–ø–∫–∏", group: "–°–º–∞–π–ª–∏–∫–∏"),
        Emoji(symbol: "üòç", name: "–í–ª—é–±–ª—ë–Ω–Ω—ã–π", description: "–í–ª—é–±–ª—ë–Ω–Ω–∞—è –º–æ—Ä–¥–æ—á–∫–∞", usage: "—Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–ª—é–±–ª—ë–Ω–Ω–æ—Å—Ç–∏", group: "–°–º–∞–π–ª–∏–∫–∏"),
        Emoji(symbol: "üáßüáæ", name: "–ë–µ–ª–∞—Ä—É—Å—å", description: "–§–ª–∞–≥ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å", usage: "–¥–ª—è –ø–∞—Ä–∞–¥–∞", group: "–§–ª–∞–≥–∏"),
        Emoji(symbol: "üá∑üá∫", name: "–†–æ—Å—Å–∏—è", description: "–§–ª–∞–≥ –†–æ—Å—Å–∏–∏", usage: "—Å–∏–º–≤–æ–ª –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞", group: "–§–ª–∞–≥–∏")
    ]
    
    var groups: [String] {
        var groups = Set<String>()
        
        for emoji in emojis {
            groups.insert(emoji.group)
        }
        
        return groups.sorted()
    }
    

    func emojis(for group: String) -> [Emoji] {
        return emojis.filter({$0.group == group})
    }
    
    func absoluteIndex(of emoji: Emoji)->Int? {
        for (index, element) in emojis.enumerated() {
            if element === emoji { return index}
        }
        return nil
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        // Uncomment the following line to preserve selection between presentations
        // self.clearsSelectionOnViewWillAppear = false

        // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
         navigationItem.leftBarButtonItem = editButtonItem
    }
    
    override func viewWillAppear(_ animated: Bool) {
        tableView.reloadData()
    }

    // MARK: - Table view data source

    override func numberOfSections(in tableView: UITableView) -> Int {
        return groups.count
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
//        if section == 0 {
//            return emojis.count
//        } else {
//            // not implemented
//            return 0
//        }
        return emojis(for: groups[section]).count
    }
    
    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return groups[section]
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "EmojiTableViewCell", for: indexPath) as! EmojiTableViewCell

        let emojis_g = emojis(for: groups[indexPath.section])
        let emoji = emojis_g[indexPath.row]
        
        cell.update(with: emoji)

        return cell
    }
    
    override func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {
        
        let movedEmoji = emojis(for: groups[sourceIndexPath.section])[sourceIndexPath.row]
        
        var destinationIndex: Int?
        
        if destinationIndexPath.row > emojis(for: groups[destinationIndexPath.section]).count-1 {
            if destinationIndexPath.section < groups.count-1 {
                let targetEmoji = emojis(for: groups[destinationIndexPath.section+1])[0]
                destinationIndex = absoluteIndex(of: targetEmoji)!
            }
        } else {
            let targetEmoji = emojis(for: groups[destinationIndexPath.section])[destinationIndexPath.row]
            destinationIndex = absoluteIndex(of: targetEmoji)!
        }
        
        let sourceIndex = absoluteIndex(of: movedEmoji)!
        
        if sourceIndexPath.section != destinationIndexPath.section {
            movedEmoji.group = groups[destinationIndexPath.section]
        }
        
        
        emojis.remove(at: sourceIndex)
        if let destinationIndex = destinationIndex {
            emojis.insert(movedEmoji, at: destinationIndex)
        } else {
            emojis.append(movedEmoji)
        }
        
        tableView.reloadData()
    }
    
    
    override func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath) -> UITableViewCell.EditingStyle {
        return .delete
    }

    // Override to support editing the table view.
    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            // Delete the row from the data source
            emojis.remove(at: absoluteIndex(of: emojis(for: groups[indexPath.section])[indexPath.row])!)
            tableView.deleteRows(at: [indexPath], with: .fade)
        } else if editingStyle == .insert {
            // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
        }    
    }
    


    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        
        if segue.identifier == "EditEmoji",
            let selectedRow = tableView.indexPathForSelectedRow {
            let nc = segue.destination as! UINavigationController
            let vc = nc.topViewController as! EmojiEditTableViewController
            vc.emoji = emojis(for: groups[selectedRow.section])[selectedRow.row]
        }
    }

    
    @IBAction func unwindToEmodjiTable(segue: UIStoryboardSegue) {
        guard segue.identifier == "saveUnwind",
            let sourceVC = segue.source as? EmojiEditTableViewController
        else { return }
        
        if let emodji = sourceVC.emoji {
            if let selectedRow = tableView.indexPathForSelectedRow {
                let row = absoluteIndex(of: emojis(for: groups[selectedRow.section])[selectedRow.row])!
                emojis[row] = emodji
            } else {
                emojis.append(emodji)
            }
            tableView.reloadData()
        }
        
    }
    
    
 

}
